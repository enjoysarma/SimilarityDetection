#line 2 "/home/nikolovd/MasterRad/SimilarityDetection_pthreads/build/../src/lexer.cpp"

#line 4 "/home/nikolovd/MasterRad/SimilarityDetection_pthreads/build/../src/lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[681] =
    {   0,
        0,    0,    0,    0,    0,    0,   93,   93,  143,  142,
      103,  110,  142,  142,  106,  111,  142,  108,  106,  105,
      109,  105,  109,  106,   68,   69,  109,  141,  112,  104,
      112,  113,   88,  107,  111,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  139,  111,  140,  110,  101,  101,
      101,   98,  142,   97,   93,   94,  125,    0,   67,    0,
        0,    0,    0,    0,    0,  134,  126,  135,    0,    0,
        0,  132,  118,  130,  119,  131,  117,  114,    0,   72,
       99,  102,  133,   72,   68,    0,    0,   68,   68,    0,

       68,   69,   69,   69,   69,  115,  120,  122,  124,  123,
      121,    0,    0,    0,   88,    0,  136,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   41,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   46,   88,   88,   88,
       88,   88,   88,   53,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,  137,  127,  101,  101,  100,   98,   93,    0,    0,
       67,    0,    0,    0,    0,    0,    0,   66,    0,    0,
      116,  138,    0,   72,  102,    0,   73,   68,   68,   68,
       68,    0,   70,   69,   69,   69,   69,  129,  128,    0,

        0,   89,    0,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   44,   88,   88,   88,   80,   88,   88,   88,
       47,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   51,   88,   88,
       88,   88,   88,   88,   88,   88,   88,    0,    0,   67,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
       65,   64,    0,   72,   73,   68,    0,    0,   70,    0,
       70,   70,   69,    0,   90,    0,   89,    0,   91,   96,
       96,   96,   96,   88,   96,   95,    5,   74,   88,   33,

       88,   75,   88,   88,   88,   88,   88,   88,   88,   42,
       43,   88,   88,   88,   88,   88,   88,   45,   88,   88,
       81,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   63,   88,
       88,   88,   88,   88,   84,   88,   88,   88,   67,    0,
       67,    0,   28,    0,    0,    0,    0,    0,   70,   70,
        0,   71,   70,   70,    0,   90,    0,   91,   96,   96,
       89,   96,   96,   95,   95,   32,   34,   37,    7,   88,
       88,   88,   88,   88,   88,   88,   88,   62,   82,   88,
       88,   88,    0,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   78,   88,   88,   88,   88,   88,   88,   50,
       88,   88,   35,   88,   22,   88,   88,   88,   52,    0,
       28,   29,   27,    0,    0,    0,   71,   70,   96,   90,
       96,   89,   96,   91,   88,   88,   88,   40,   83,   88,
       88,    6,    8,    3,   11,   88,    0,    0,    0,    0,
        0,   88,   88,   88,   88,   88,   16,   88,   88,   48,
        0,   77,   55,   10,   36,   49,   88,   88,   88,   88,
       22,   22,   22,   22,   22,   22,   88,   88,   88,   92,
       29,   27,   26,    0,   30,   96,   90,   96,   91,   88,
       88,   39,   88,   88,    8,    8,    8,    8,    8,    8,

       88,    0,    0,    0,    0,    0,    4,   88,   88,   18,
       88,    0,   19,   88,   88,    0,    0,    0,    0,   88,
       88,   23,   88,   88,   22,   22,   22,   22,   12,   88,
       13,   92,   26,   25,   30,   88,   38,   88,    2,    8,
        8,    8,    8,   88,    0,   85,    0,    0,    0,   88,
       88,    0,   21,   88,    9,   88,    0,    0,    0,    0,
        0,    0,   54,   88,   88,   15,   76,   22,   22,   22,
       22,   22,   22,   14,   25,   88,   88,    8,    8,    8,
        8,    8,    8,    1,    0,    0,    0,   88,    0,    0,
       57,    0,    0,   88,    0,   17,   88,   79,    0,    0,

        0,    0,   88,    0,    0,    0,   22,   22,   22,   22,
       60,   88,    8,    8,    8,    8,    0,    0,    0,    0,
       31,   57,    0,    0,    0,    0,   89,    0,    0,    0,
       20,   88,    0,   87,    0,    0,   88,    0,   24,    0,
        0,    0,    0,   88,    0,   31,   31,    0,   56,    0,
       90,    0,   89,    0,   91,   88,    0,   58,    0,    0,
        0,    0,   61,    0,   31,    0,   90,    0,   91,   88,
        0,   86,    0,    0,   88,    0,   88,   88,   59,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,    9,   30,   30,   30,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   33,   33,   33,   35,
       33,   33,   33,   33,   36,   33,   33,   37,   33,   33,
       38,   39,   40,   41,   42,    9,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   33,   52,   53,   54,   55,
       56,   57,   33,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[71] =
    {   0,
        1,    1,    2,    3,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    6,    5,    5,    7,    8,    5,
        9,    9,    9,   10,    5,    5,    5,    5,    5,   11,
       11,   11,   12,   12,   12,   12,   12,    5,    5,    5,
        5,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,    5,    5,   13,    5
    } ;

static yyconst flex_uint16_t yy_base[720] =
    {   0,
        0,    0,   67,   68,   69,   70, 1056, 1053, 1055, 4891,
     4891, 1027,   68,   73, 1017,   66,   59, 4891, 1016,   64,
     4891,   67,   81,   72,  121,  114, 1017, 4891,   62, 1008,
       78, 4891,  107, 4891, 1005,  110,  146,  173,  130,  150,
       58,  103,  165,  169,  174,  189,  190,  201,  213,  221,
      232,  243,  257,  261, 4891,   54, 4891, 4891, 1027, 1022,
     1004, 1019, 1014, 4891,    0, 4891, 4891,   79,  316,  102,
      284,  970,   68,   42,  956, 4891, 4891, 4891, 1000,  142,
      303, 4891, 4891, 4891, 4891, 4891,  994, 4891,  984,  306,
     4891,    0, 4891,  345,  350,  368,  327,  126,  113,  981,

      148,  383,  219,  145,  242, 4891,  971, 4891, 4891, 4891,
      962,  377,  956,  185,  283,  951, 4891,  370,  375,  384,
      395,  396,  404,  415,  419,  430,  434,  438,  446,  454,
      463,  458,  474,  475,  486,  491,  500,  502,  511,  520,
      525,  534,  539,  548,  556,  567,  565,  576,  581,  585,
      599,  603,  608,  617,  619,  634,  638,  649,  653,  658,
      667, 4891, 4891,  969,  963, 4891,    0,    0,  405,  189,
      722,  916,  899,  909,  126,  908,  907, 4891,  935,  929,
     4891, 4891,  712, 4891,    0,  334,  715,  222, 4891,  904,
      875,    0,  720,  231, 4891,  893,  870, 4891, 4891,  247,

      265,  359,  329,  781,  709,  714,  809,  810,  811,  825,
      826,  834,  845,  849,  860,  864,  865,  876,  881,  892,
      890,  901,  909,  913,  918,  927,  929,  938,  943,  954,
      952,  963,  972,  977,  986,  995,  997, 1006, 1015, 1026,
     1027, 1035, 1043, 1047, 1055, 1063, 1067, 1072, 1083, 1081,
     1092, 1097, 1101, 1112, 1113, 1117, 1121,  918,  192,  738,
      234, 1176, 1182,  855,  853,  846,  844,  843,  827,  821,
     4891, 4891,  753, 1169, 4891, 4891,  154,  259,  504, 1177,
      291,  380, 4891,  380,  458,  566,  569,  461,  692,    0,
     1201,  830, 1268,  869,  831,  301, 1173, 1181, 1189, 1190,

     1201, 1205, 1206, 1296, 1297, 1301, 1315, 1210, 1316, 1324,
     1333, 1341, 1345, 1356, 1357, 1365, 1373, 1374, 1388, 1389,
     1430, 1407, 1403, 1415, 1423, 1427, 1435, 1439, 1444, 1453,
     1462, 1467, 1476, 1484, 1488, 1500, 1496, 1504, 1505, 1516,
     1520, 1531, 1536, 1540, 1552, 1554, 1563, 1575, 1630, 1636,
     1642,  730,    0,  724,  723,  711,  671,  677,  240, 4891,
      757, 1629,  688,  668,  695,  748,  745,  987, 1682,    0,
     1752, 1652, 1822,  305,    0, 1574, 1850, 1851, 1855, 1859,
     1867, 1875, 1883, 1884, 1898, 1899, 1907, 1915, 1923, 1924,
     1935, 1940, 1981, 1951, 1959, 1968, 1970, 1988, 2000, 2004,

     2005, 2016, 1655, 2024, 2025, 2039, 2040, 2048, 2056, 2060,
     2064, 2065, 2076, 2080, 2136, 2164, 2165, 2169, 2180,  672,
        0,    0,    0,  667,  666,  643, 4891, 4891,    0, 2236,
      660,    0,    0, 2306, 2334, 2335, 2339, 2350, 2351, 2365,
     2366, 2370, 2426, 2454, 2455, 2456,  627,  625,  618,  620,
      613, 2471, 2470, 2472, 2486, 2487, 2541, 2498, 2513, 2514,
     2569, 2572, 2576, 2555, 2530, 2556, 2571, 2580, 2589, 2560,
        0, 2632,  626, 2656,    0,  624, 2591, 2684, 2685,    0,
        0,    0,    0,  598,    0,  868,    0, 1204,    0, 2686,
     2700, 2701, 2716, 2717,    0, 2760,  616, 2784,    0,  616,

     2718,  578,  576,  578,  578,  563, 2812, 2813, 2814, 2856,
     2834, 2873,  578, 2843, 2852,  545, 2895, 2907,  582, 2879,
     2880, 2891, 2902, 2907, 2963,    0, 3033, 3103, 3131, 3132,
     3133,    0,    0,    0,    0, 3147, 3148, 3149, 3164, 3220,
        0, 3290, 3360, 3388,  550, 4891,  544,  528,  509, 3389,
     3448, 3516,  535, 3477, 3390, 3486,  489,  485,  477,  470,
      472,  507, 4891, 3495, 3538, 3510, 3549,    0, 3573,  741,
        0,    0, 3643, 3671,    0, 3672, 3673,    0, 3732,  906,
        0,    0, 3802, 3830,  459,  456,  443, 3871,  472, 3893,
      495,  104, 3917,  600,  225, 3985, 3832, 4891,  439,  419,

      415,  411, 3854, 3988,  431, 3992, 1084,    0, 1340,    0,
     3946, 3965, 1209,    0, 1358,    0,  406,  404,  388, 4014,
     4017, 4891,  543,  419, 4049,    0, 4115, 4037, 4183, 4041,
      405, 4014,  364, 4891,  372,  342, 4144,  366,  360,  325,
      305,  296,  292, 4146,  275,    0, 4044,  299, 4891,    0,
     4249, 1659,    0,    0, 4319, 4348,  231, 4155,  222,  201,
      182,  178, 4349,  164,    0, 2635,    0, 1984,    0, 4350,
      149, 4891,  145,   69, 4364,   24, 4365, 4366, 4380, 4891,
     4436, 4449, 4462, 4475, 4485, 4497, 4509, 4522, 4535, 4541,
     4551, 4563, 4575, 4580, 4590, 4601, 4612, 4623, 4634, 4646,

     4659, 4672, 4685, 4697, 4710, 4723, 4736, 4749, 4762, 4775,
     4788, 4801, 4813, 4825, 4838, 4850, 4861, 4873, 4878
    } ;

static yyconst flex_int16_t yy_def[720] =
    {   0,
      680,    1,  681,  681,  682,  682,  683,  683,  680,  680,
      680,  680,  684,  680,  680,  680,  685,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  686,  680,  680,  686,  686,  686,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  680,  680,  680,  680,  687,  687,
      680,  680,  680,  680,  688,  680,  680,  684,  680,  684,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  689,  680,  680,  680,  680,  680,  680,  680,  690,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  691,   38,  680,  680,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  680,  680,  687,  687,  680,  692,  688,  680,  693,
      684,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  689,  680,  680,  680,  680,  680,
      680,  694,  690,  680,  680,  680,  680,  680,  680,  695,

      691,  696,  697,  680,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  680,  693,  680,
      693,  684,  693,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  694,  694,  680,  680,
      680,  680,  680,  695,  698,  680,  696,  697,  699,  700,
      700,  700,  680,  204,  700,  701,   38,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      686,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  693,  693,
      693,  680,  702,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  698,  680,  699,  680,  293,
      680,  700,  680,  701,  703,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,  680,   38,   38,   38,   38,   38,   38,   38,

       38,   38,  686,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  680,   38,   38,   38,   38,  680,
      702,  704,  705,  680,  680,  680,  680,  680,  369,  680,
      700,  371,  373,  680,   38,   38,   38,   38,   38,   38,
       38,   38,  680,   38,   38,   38,  680,  680,  680,  680,
      680,   38,   38,   38,   38,   38,  686,   38,   38,   38,
      680,  686,  686,   38,   38,   38,   38,   38,   38,   38,
      706,  706,  706,  680,  415,  706,   38,   38,   38,  707,
      704,  705,  708,  680,  709,  700,  430,  700,  434,   38,
       38,   38,   38,   38,  710,  710,  710,  680,  443,  710,

       38,  680,  680,  680,  680,  680,   38,   38,   38,  686,
       38,  680,  680,   38,   38,  680,  680,  680,  711,   38,
       38,   38,   38,   38,  680,  474,  680,  680,   38,   38,
       38,  707,  708,  712,  709,   38,   38,   38,   38,  680,
      498,  680,  680,   38,  680,  680,  680,  680,  680,   38,
      680,  680,  680,   38,   38,   38,  680,  680,  680,  680,
      680,  711,  680,   38,  686,   38,  686,  525,  680,  706,
      527,  528,  680,   38,  712,   38,   38,  540,  680,  710,
      542,  543,  680,   38,  680,  680,  680,  713,  714,  714,
      680,  714,  680,  551,  714,  686,   38,  680,  680,  680,

      680,  680,   38,  680,  715,  680,  706,  569,  706,  573,
       38,   38,  710,  579,  710,  583,  680,  680,  680,  716,
      717,  680,  680,  718,  593,  593,  680,  714,  593,  680,
      680,   38,  680,  680,  680,  680,   38,  715,  715,  680,
      680,  680,  680,   38,  680,  719,  717,  718,  680,  625,
      680,  714,  627,  629,  680,   38,  680,   38,  680,  680,
      680,  680,   38,  680,  719,  714,  651,  714,  655,   38,
      680,  680,  680,  680,   38,  680,   38,   38,   38,    0,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680
    } ;

static yyconst flex_uint16_t yy_nxt[4962] =
    {   0,
       10,   11,   11,   11,   11,   12,   13,   14,   10,   15,
       16,   17,   18,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   26,   27,   28,   29,   30,   31,   32,   33,
       33,   33,   33,   33,   33,   33,   33,   34,   10,   34,
       35,   33,   36,   37,   38,   39,   40,   41,   42,   33,
       43,   33,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   33,   33,   33,   55,   56,   57,   58,
       60,   60,   63,   63,   69,   71,   77,   71,   80,   83,
      162,   61,   61,  672,   85,   69,   91,  107,  108,  175,
       84,   92,   78,   86,   87,   88,  176,   81,   93,   89,

      132,   90,   90,   90,  110,  111,   70,  115,  171,  112,
      133,  112,  112,  134,  112,  135,  622,   70,   72,   73,
      173,  163,  174,   74,  113,  114,  676,  113,  114,   75,
      116,  625,   94,  116,  102,  102,  102,   64,   64,   94,
       70,   95,   95,   96,   97,  115,  190,  103,  112,  104,
      112,   97,  115,  178,   98,  115,   99,  100,  136,  188,
       97,  189,  179,  113,  114,  191,  105,   97,  118,  116,
      119,  267,  115,  101,  104,  112,  126,  112,  196,  115,
      268,   99,  115,  189,  100,  127,  189,  201,  280,  201,
      113,  114,  115,  672,  128,  260,  116,  197,  260,  115,

      188,  120,  129,  121,  130,  115,  672,  115,  189,  546,
      280,  115,  137,  131,  115,  122,  115,  115,  115,  138,
      115,  115,  123,  115,  139,  124,  115,  261,  125,  115,
      261,  141,  115,  674,  140,  142,  673,  622,  115,  115,
      349,  115,  115,  115,  115,  115,  143,  144,  629,  284,
      115,  284,  194,  115,  195,  115,  115,  189,  145,  147,
      672,  146,  115,  115,  671,  115,  195,  201,  115,  201,
      148,  149,  261,  115,  115,  360,  115,  195,  152,  195,
      150,  153,  189,  151,  115,  115,   71,  115,   71,  154,
      634,  195,  115,  280,  194,  115,  155,  156,  115,  115,

      360,  157,  195,  115,  375,  160,  115,  158,  375,  115,
      161,  649,  159,  115,  178,  280,  115,  169,  169,  169,
      169,  664,  170,  180,  363,  115,   90,   90,   90,   72,
       73,  288,  115,  288,   74,  115,  183,  184,  115,  184,
       75,  662,  186,  364,  186,  180,  180,  187,  187,  187,
      180,  661,  183,  184,  187,  187,  187,  180,  184,  660,
      180,  286,  180,  286,  180,   90,   90,   90,   94,  290,
       95,   95,   96,  290,  659,  183,  184,  114,  184,  112,
       97,  112,  284,   98,  284,   99,   94,  639,   96,   96,
       96,  183,  184,  639,  113,  114,   97,  184,   97,  657,

      116,   94,  101,  102,  102,  102,  169,  169,  169,  169,
       99,  170,  115,   97,   97,  360,  103,  115,  104,  115,
      634,  634,  115,  204,  115,  115,  115,  115,  203,   97,
      115,  649,  359,  115,  205,  105,  115,  115,  115,  206,
      360,  207,  645,  104,  115,  115,  210,  115,  115,  546,
      115,  115,  546,  115,  208,  209,  115,  211,  639,  115,
      365,  115,  365,  288,  115,  288,  636,  115,  115,  635,
      115,  115,  115,  212,  115,  113,  115,  213,  634,  115,
      115,  633,  214,  115,  622,  115,  115,  115,  115,  115,
      115,  619,  216,  115,  215,  115,  115,  623,  115,  623,

      115,  115,  618,  115,  217,  115,  115,  115,  624,  115,
      221,  617,  115,  115,  218,  115,  115,  115,  115,  219,
      563,  602,  220,  115,  115,  601,  115,  115,  115,  222,
      115,  600,  223,  115,  599,  115,  224,  359,  115,  360,
      115,  115,  115,  115,  115,  623,  115,  623,  598,  115,
      225,  115,  115,  115,  226,  115,  624,  115,  203,  587,
      115,  227,  115,  115,  360,  228,  115,  115,  286,  115,
      286,  286,  115,  286,  115,  115,  115,  115,  230,  229,
      115,  115,  586,  115,  114,  232,  115,  114,  115,  115,
      115,  115,  546,  585,  115,  563,  231,  115,  115,  557,

      115,  203,  628,  115,  628,  115,  233,  115,  115,  115,
      235,  234,  622,  236,  115,  237,  115,  115,  115,  115,
      115,  549,  115,  115,  238,  115,  548,  242,  115,  240,
      115,  239,  547,  115,  115,  546,  115,  115,  545,  543,
      115,  115,  243,  540,  534,  115,  241,  528,  115,  244,
      115,  115,  115,  525,  115,  115,  245,  115,  115,  115,
      115,  115,  431,  115,  431,  246,  115,  506,  115,  115,
      505,  115,  115,  504,  115,  249,  115,  247,  293,  503,
      115,  248,  502,  115,  250,  485,  115,  115,  252,  115,
      115,  115,  251,  115,  367,  115,  367,  365,  115,  365,

      115,  115,  115,  254,  115,  255,  253,  256,  115,  115,
      115,  484,  113,  115,  483,  116,  115,  257,  480,  115,
      428,  428,  115,  262,  262,  169,  262,  273,  263,  273,
      426,  425,  274,  274,  274,  187,  187,  187,  278,  169,
      169,  169,  169,  570,  170,  570,  275,  367,  275,  367,
      365,  115,  365,  279,  280,  281,  115,  424,  115,  474,
       70,  115,  275,  115,  297,  113,  298,  275,  116,  115,
      423,  422,  282,  274,  274,  274,  280,  362,  362,  362,
      281,  290,  290,  291,  420,  291,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  292,  293,

      290,  294,  294,  294,  295,  290,  290,  290,  290,  290,
      294,  294,  294,  294,  294,  294,  294,  294,  290,  290,
      290,  290,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  296,  290,  290,
      290,  299,  115,  115,  373,  301,  300,  369,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  358,
      486,  372,  486,  372,  115,  115,  115,  115,  115,  357,
      115,  115,  302,  115,  303,  292,  115,  306,  356,  115,
      355,  115,  304,  305,  115,  307,  354,  115,  115,  353,

      115,  115,  115,  308,  115,  352,  309,  115,  580,  115,
      580,  310,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  167,  283,  115,  498,  115,  283,  276,  115,  311,
      115,  115,  115,  312,  115,  290,  313,  276,  314,  115,
      272,  115,  115,  316,  115,  115,  271,  115,  315,  270,
      115,  115,  269,  115,  266,  115,  115,  265,  115,  317,
      115,  115,  115,  264,  115,  115,  165,  115,  115,  115,
      115,  115,  165,  318,  203,  320,  115,  319,  115,  115,
      115,  115,  115,  200,  115,  322,  321,  115,  199,  367,
      115,  367,  115,  115,  115,  115,  115,  198,  115,  192,

      323,  115,  182,  115,  115,  115,  115,  115,  181,  115,
      116,  178,  115,  177,  115,  115,  172,  167,  115,  115,
      324,  115,  167,  166,  115,  165,  115,  115,  115,  115,
      165,  117,  115,  325,  109,  115,  326,  115,  327,  115,
      106,  115,   82,   76,  115,  328,  115,  115,  115,  115,
      115,  329,  115,   67,  680,  115,   66,  115,  115,   66,
      680,  115,  680,  680,  115,  680,  330,  115,  115,  115,
      115,  680,  331,  333,  680,  115,  115,  115,  115,  115,
      332,  115,  115,  680,  115,  115,  607,  115,  607,  115,
      115,  680,  115,  680,  334,  115,  115,  115,  115,  115,

      680,  473,  115,  335,  115,  115,  336,  115,  680,  115,
      115,  337,  115,  339,  115,  115,  115,  680,  338,  115,
      680,  115,  115,  115,  115,  115,  680,  115,  680,  340,
      115,  680,  115,  115,  115,  115,  341,  680,  115,  115,
      680,  115,  342,  115,  115,  680,  115,  115,  680,  115,
      115,  343,  115,  115,  115,  346,  115,  345,  680,  347,
      344,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  680,  115,  348,  680,  680,  115,  262,  262,  169,
      262,  680,  263,  350,  350,  169,  350,  680,  351,  274,
      274,  274,  361,  680,  361,  680,  680,  362,  362,  362,

      184,  680,  184,  291,  680,  291,  488,  680,  488,  680,
      680,  613,  680,  613,   70,  115,  184,  680,  292,  293,
      261,  184,  115,  115,  295,  115,  497,  295,  115,  680,
      115,  115,  115,  115,  680,  680,  115,  680,  115,  115,
      376,  115,  115,  115,  115,  115,  680,  115,  115,  680,
      377,  680,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  383,  680,  378,  115,  680,  296,  290,  290,
      370,  680,  370,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  371,  371,  371,

      371,  371,  371,  371,  371,  290,  290,  290,  290,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  290,  290,  290,  290,  115,  115,
      680,  680,  609,  115,  609,  115,  115,  380,  115,  115,
      115,  115,  115,  115,  680,  379,  115,  115,  115,  680,
      615,  381,  615,  476,  115,  115,  115,  115,  115,  384,
      115,  115,  680,  115,  382,  115,  115,  680,  680,  115,
      680,  500,  115,  115,  680,  115,  680,  115,  115,  680,
      115,  385,  680,  115,  115,  680,  115,  115,  115,  115,

      115,  680,  386,  388,  680,  115,  115,  115,  115,  115,
      680,  115,  115,  387,  115,  115,  115,  115,  680,  680,
      115,  680,  115,  115,  389,  115,  115,  390,  115,  115,
      115,  115,  393,  680,  393,  680,  680,  115,  115,  680,
      115,  115,  391,  115,  115,  115,  392,  113,  114,  115,
      394,  680,  115,  116,  680,  115,  115,  396,  115,  115,
      680,  395,  115,  680,  115,  397,  680,  115,  680,  115,
      115,  680,  115,  398,  680,  115,  115,  115,  115,  115,
      680,  115,  115,  680,  115,  399,  115,  115,  115,  680,
      115,  115,  680,  115,  115,  115,  115,  400,  680,  115,

      680,  680,  115,  401,  115,  115,  680,  680,  115,  115,
      402,  115,  680,  404,  115,  680,  115,  115,  115,  115,
      680,  403,  115,  680,  680,  115,  115,  680,  115,  680,
      115,  405,  407,  115,  406,  680,  115,  115,  115,  115,
      115,  680,  115,  115,  408,  115,  115,  115,  409,  115,
      680,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  411,  115,  680,  680,  115,  410,  680,  115,  115,
      412,  115,  115,  115,  413,  115,  680,  680,  115,  414,
      115,  680,  115,  115,  415,  115,  115,  680,  115,  115,
      680,  115,  115,  680,  115,  115,  115,  680,  680,  680,

      416,  115,  680,  115,  115,  115,  115,  115,  680,  115,
      680,  680,  115,  417,  680,  115,  115,  115,  115,  680,
      418,  419,  680,  115,  115,  680,  115,  115,  680,  115,
      115,  350,  350,  169,  350,  680,  351,  350,  350,  169,
      350,  680,  351,  350,  350,  169,  350,  680,  351,  362,
      362,  362,  680,  680,  372,  680,  372,  461,  680,  461,
      427,  652,  427,  652,  680,  680,  680,  680,  261,  292,
      293,  622,  113,  114,  261,  295,  427,  593,  116,  680,
      261,  427,  290,  290,  429,  680,  429,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  430,  430,  430,  430,  430,  430,  430,  430,  290,
      290,  290,  290,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  290,  290,
      290,  290,  290,  290,  431,  680,  431,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      293,  290,  432,  432,  432,  290,  290,  290,  290,  290,
      290,  432,  432,  432,  432,  432,  432,  432,  432,  290,
      290,  290,  290,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  290,  290,
      290,  290,  290,  290,  433,  680,  433,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  434,  434,  434,  434,  434,  434,  434,  434,  290,
      290,  290,  290,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  290,  290,
      290,  290,  115,  115,  680,  680,  435,  115,  680,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  680,  436,  115,  680,  115,  115,  680,  437,
      680,  438,  115,  680,  115,  115,  115,  115,  680,  439,
      115,  680,  115,  115,  440,  115,  115,  680,  115,  115,
      115,  115,  441,  680,  680,  680,  680,  115,  115,  115,
      115,  115,  680,  115,  115,  680,  115,  115,  442,  115,
      680,  443,  115,  680,  115,  115,  115,  115,  680,  444,
      115,  680,  115,  115,  680,  115,  115,  115,  115,  115,
      680,  445,  115,  393,  115,  393,  668,  115,  668,  115,
      115,  680,  115,  115,  680,  115,  622,  446,  113,  114,

      115,  115,  680,  452,  116,  680,  115,  595,  115,  680,
      115,  115,  115,  680,  115,  453,  680,  115,  680,  115,
      115,  680,  115,  115,  680,  115,  447,  454,  680,  455,
      115,  448,  456,  449,  680,  680,  680,  115,  680,  450,
      115,  451,  115,  115,  457,  680,  115,  115,  680,  115,
      680,  459,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  680,  680,  458,  680,  115,  115,  115,  115,  462,
      460,  115,  463,  115,  115,  680,  115,  115,  680,  115,
      115,  115,  115,  464,  680,  680,  680,  680,  115,  115,
      115,  115,  115,  680,  115,  115,  680,  466,  467,  465,

      115,  680,  115,  115,  680,  115,  115,  469,  115,  115,
      468,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  680,  115,  680,  680,  115,  680,  680,  115,  115,
      680,  115,  115,  680,  470,  115,  471,  471,  472,  680,
      472,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  473,  474,  471,  475,  475,  475,  476,
      471,  471,  471,  471,  471,  475,  475,  475,  475,  475,
      475,  475,  475,  471,  471,  471,  471,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  471,  471,  471,  471,  477,  115,  680,  680,
      479,  115,  680,  115,  115,  478,  115,  115,  115,  115,
      115,  115,  115,  680,  115,  680,  680,  680,  680,  115,
      680,  680,  115,  680,  680,  115,  290,  290,  486,  680,
      486,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  292,  290,  290,  487,  487,  487,  290,
      290,  290,  290,  290,  290,  487,  487,  487,  487,  487,
      487,  487,  487,  290,  290,  290,  290,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  290,  290,  290,  290,  290,  290,  488,  680,
      488,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  489,  489,  489,  295,
      290,  290,  290,  290,  290,  489,  489,  489,  489,  489,
      489,  489,  489,  290,  290,  290,  290,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  290,  290,  290,  290,  115,  115,  490,  680,
      680,  115,  680,  115,  115,  680,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  491,  680,  680,  492,  115,

      115,  680,  115,  115,  680,  115,  115,  115,  115,  493,
      680,  680,  115,  680,  115,  115,  494,  115,  115,  115,
      115,  115,  115,  680,  680,  115,  495,  495,  496,  680,
      496,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  497,  498,  495,  499,  499,  499,  500,
      495,  495,  495,  495,  495,  499,  499,  499,  499,  499,
      499,  499,  499,  495,  495,  495,  495,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  495,  495,  495,  495,  115,  115,  115,  680,

      680,  680,  680,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  508,  115,  115,  680,  501,  507,  680,  115,
      115,  115,  115,  115,  115,  115,  115,  509,  115,  115,
      680,  680,  510,  680,  680,  115,  115,  680,  115,  115,
      115,  115,  115,  512,  514,  512,  511,  115,  680,  680,
      115,  680,  680,  115,  680,  115,  115,  680,  113,  114,
      680,  680,  115,  115,  513,  115,  115,  680,  115,  115,
      515,  461,  115,  461,  517,  680,  517,  680,  518,  115,
      518,  680,  115,  680,  680,  115,  113,  114,  519,  113,
      114,  680,  116,  113,  114,  116,  520,  115,  115,  116,

      680,  680,  115,  680,  115,  115,  524,  115,  115,  115,
      115,  115,  115,  115,  680,  115,  680,  680,  680,  516,
      115,  680,  115,  115,  680,  680,  115,  522,  680,  115,
      521,  115,  115,  115,  472,  115,  472,  666,  115,  666,
      115,  115,  523,  529,  115,  680,  115,  622,  680,  473,
      474,  680,  592,  680,  680,  476,  471,  471,  526,  680,
      526,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  527,  527,  527,  527,  527,
      527,  527,  527,  471,  471,  471,  471,  527,  527,  527,

      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  471,  471,  471,  471,  115,  115,  536,  680,
      680,  680,  680,  115,  115,  115,  530,  115,  115,  115,
      115,  115,  115,  115,  531,  680,  537,  680,  680,  115,
      115,  680,  115,  115,  680,  115,  115,  538,  115,  115,
      115,  680,  496,  680,  496,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  544,  680,  539,  497,  498,  680,
      680,  680,  680,  500,  495,  495,  541,  680,  541,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  542,  542,  542,  542,  542,  542,  542,
      542,  495,  495,  495,  495,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      495,  495,  495,  495,  115,  115,  115,  550,  552,  680,
      552,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      680,  551,  680,  113,  114,  512,  115,  512,  680,  553,
      554,  680,  680,  115,  680,  115,  115,  680,  680,  115,
      113,  114,  115,  680,  115,  115,  513,  517,  115,  517,

      555,  115,  680,  680,  115,  680,  680,  115,  556,  518,
      680,  518,  113,  114,  680,  680,  680,  680,  116,  519,
      680,  115,  115,  564,  113,  114,  565,  680,  115,  115,
      116,  115,  115,  115,  115,  115,  680,  680,  680,  558,
      115,  680,  680,  115,  115,  559,  115,  560,  566,  115,
      680,  115,  567,  561,  115,  680,  115,  115,  680,  115,
      680,  680,  115,  471,  471,  568,  680,  568,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  569,  569,  569,  569,  569,  569,  569,  569,

      471,  471,  471,  471,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  471,
      471,  471,  471,  471,  471,  570,  680,  570,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  474,  471,  571,  571,  571,  471,  471,  471,  471,
      471,  471,  571,  571,  571,  571,  571,  571,  571,  571,
      471,  471,  471,  471,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  471,

      471,  471,  471,  471,  471,  572,  680,  572,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  573,  573,  573,  573,  573,  573,  573,  573,
      471,  471,  471,  471,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  471,
      471,  471,  471,  115,  115,  115,  680,  680,  574,  680,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  680,  577,  680,  680,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  576,  115,  680,  680,  680,
      680,  680,  680,  115,  680,  680,  115,  680,  680,  115,
      495,  495,  578,  680,  578,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  579,
      579,  579,  579,  579,  579,  579,  579,  495,  495,  495,
      495,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  495,  495,  495,  495,
      495,  495,  580,  680,  580,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  498,  495,
      581,  581,  581,  495,  495,  495,  495,  495,  495,  581,
      581,  581,  581,  581,  581,  581,  581,  495,  495,  495,
      495,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  495,  495,  495,  495,
      495,  495,  582,  680,  582,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  583,
      583,  583,  583,  583,  583,  583,  583,  495,  495,  495,

      495,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  495,  495,  495,  495,
      115,  115,  115,  680,  680,  588,  680,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  680,  584,  589,  589,
      590,  589,  590,  589,  589,  589,  589,  589,  589,  589,
      591,  589,  589,  589,  589,  592,  593,  589,  594,  594,
      594,  595,  589,  589,  589,  589,  589,  594,  594,  594,
      594,  594,  594,  594,  594,  589,  589,  589,  589,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  589,  589,  589,  589,  552,  115,
      552,  680,  596,  680,  680,  680,  115,  680,  115,  115,
      680,  680,  115,  113,  114,  115,  680,  603,  115,  553,
      604,  115,  604,  597,  115,  680,  680,  115,  680,  680,
      115,  606,  115,  606,  680,  113,  114,  680,  680,  115,
      680,  116,  115,  605,  680,  115,  113,  114,  680,  680,
      680,  680,  116,  471,  471,  607,  680,  607,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      473,  471,  471,  608,  608,  608,  471,  471,  471,  471,

      471,  471,  608,  608,  608,  608,  608,  608,  608,  608,
      471,  471,  471,  471,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  471,
      471,  471,  471,  471,  471,  609,  680,  609,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  610,  610,  610,  476,  471,  471,  471,
      471,  471,  610,  610,  610,  610,  610,  610,  610,  610,
      471,  471,  471,  471,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  471,
      471,  471,  471,  115,  115,  612,  680,  680,  680,  680,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  680,
      680,  611,  495,  495,  613,  680,  613,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  497,
      495,  495,  614,  614,  614,  495,  495,  495,  495,  495,
      495,  614,  614,  614,  614,  614,  614,  614,  614,  495,
      495,  495,  495,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  495,  495,

      495,  495,  495,  495,  615,  680,  615,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  616,  616,  616,  500,  495,  495,  495,  495,
      495,  616,  616,  616,  616,  616,  616,  616,  616,  495,
      495,  495,  495,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  495,  495,
      495,  495,  115,  620,  115,  620,  680,  680,  632,  115,
      680,  115,  115,  680,  115,  115,  680,  115,  113,  114,
      680,  115,  115,  115,  116,  590,  115,  590,  680,  680,

      680,  680,  680,  115,  680,  591,  115,  680,  680,  115,
      592,  593,  637,  680,  680,  680,  595,  589,  589,  626,
      589,  626,  589,  589,  589,  589,  589,  589,  589,  622,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  627,  627,  627,  627,
      627,  627,  627,  627,  589,  589,  589,  589,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  589,  589,  589,  589,  630,  115,  630,
      604,  680,  604,  680,  606,  115,  606,  680,  115,  680,

      680,  115,  113,  114,  680,  113,  114,  115,  631,  113,
      114,  116,  680,  605,  115,  116,  620,  115,  620,  112,
      115,  112,  680,  644,  680,  680,  680,  680,  680,  680,
      680,  113,  114,  680,  113,  114,  640,  116,  680,  628,
      116,  628,  641,  630,  642,  630,  112,  680,  112,  622,
      643,  650,  680,  650,  592,  593,  115,  680,  113,  114,
      595,  113,  114,  115,  631,  680,  115,  116,  680,  115,
      680,  680,  680,  656,  680,  680,  680,  680,  651,  651,
      651,  651,  651,  651,  651,  651,  680,  680,  680,  680,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  589,  589,  652,  589,  652,
      589,  589,  589,  589,  589,  589,  589,  622,  589,  589,
      589,  589,  589,  593,  589,  653,  653,  653,  589,  589,
      589,  589,  589,  589,  653,  653,  653,  653,  653,  653,
      653,  653,  589,  589,  589,  589,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  589,  589,  589,  589,  654,  115,  654,  115,  680,
      680,  680,  680,  115,  680,  115,  115,  115,  115,  115,

      680,  115,  680,  658,  115,  663,  680,  115,  680,  680,
      115,  680,  655,  655,  655,  655,  655,  655,  655,  655,
      680,  680,  680,  680,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  589,
      589,  666,  589,  666,  589,  589,  589,  589,  589,  589,
      589,  622,  589,  589,  589,  589,  592,  589,  589,  667,
      667,  667,  589,  589,  589,  589,  589,  589,  667,  667,
      667,  667,  667,  667,  667,  667,  589,  589,  589,  589,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  589,  589,  589,  589,  589,
      589,  668,  589,  668,  589,  589,  589,  589,  589,  589,
      589,  622,  589,  589,  589,  589,  589,  589,  589,  669,
      669,  669,  595,  589,  589,  589,  589,  589,  669,  669,
      669,  669,  669,  669,  669,  669,  589,  589,  589,  589,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  589,  589,  589,  589,  670,
      115,  115,  115,  680,  675,  680,  680,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  677,  115,  115,  680,
      680,  680,  680,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  678,  680,  679,  680,  680,  680,  115,
      680,  680,  115,  680,  680,  115,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   68,   68,  680,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  115,  680,

      115,  680,  680,  115,  115,  115,  115,  115,  115,  164,
      164,  164,  164,  164,  680,  164,  164,  164,  164,  164,
      164,  164,  168,  168,  680,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  185,  185,  680,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  193,  193,
      680,  193,  202,  680,  202,  680,  680,  680,  680,  680,
      680,  202,  202,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  259,  259,  680,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  277,  680,
      277,  285,  680,  285,  680,  680,  680,  680,  680,  680,

      285,  285,  287,  680,  287,  680,  680,  680,  287,  287,
      680,  287,  287,  289,  680,  289,  680,  680,  680,  680,
      680,  680,  289,  289,  366,  680,  366,  680,  680,  366,
      680,  366,  680,  366,  366,  368,  680,  368,  680,  680,
      680,  680,  368,  368,  368,  368,  290,  290,  680,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  421,  421,  680,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  481,  481,  680,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      482,  482,  680,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  471,  471,  680,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  532,  532,  680,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  533,
      533,  680,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  535,  535,  680,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  495,  495,  680,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  562,  562,
      680,  562,  562,  562,  562,  562,  562,  562,  562,  562,

      562,  575,  575,  680,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  621,  680,  621,  680,  680,  621,
      621,  621,  621,  621,  621,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  638,  638,
      680,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  646,  680,  646,  680,  680,  646,  646,  680,  646,
      646,  646,  647,  680,  647,  680,  680,  647,  647,  647,
      647,  647,  647,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  665,  680,  665,  665,
        9,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680
    } ;

static yyconst flex_int16_t yy_chk[4962] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    5,    6,   13,   14,   16,   14,   17,   20,
       56,    3,    4,  676,   22,   68,   24,   29,   29,   74,
       20,   24,   16,   22,   22,   23,   74,   17,   24,   23,

       41,   23,   23,   23,   31,   31,   13,   41,   70,   33,
       41,   33,   36,   41,   36,   41,  592,   68,   14,   14,
       73,   56,   73,   14,   33,   33,  674,   36,   36,   14,
       33,  592,   26,   36,   26,   26,   26,    5,    6,   25,
       70,   25,   25,   25,   26,   42,   99,   26,   37,   26,
       37,   25,   42,   80,   25,   42,   25,   25,   42,   98,
       26,   98,   80,   37,   37,   99,   26,   25,   36,   37,
       36,  175,   39,   25,   26,   38,   39,   38,  104,   39,
      175,   25,   39,  101,   25,   39,   98,  114,  277,  114,
       38,   38,   40,  673,   39,  170,   38,  104,  259,   40,

      101,   37,   40,   37,   40,   40,  671,   43,  101,  664,
      277,   44,   43,   40,   43,   38,   45,   43,   44,   43,
       43,   44,   38,   45,   44,   38,   45,  170,   38,   45,
      259,   46,   47,  662,   45,   46,  661,  595,   46,   47,
      261,   46,   47,   48,   46,   47,   47,   47,  595,  200,
       48,  200,  103,   48,  103,   49,   48,  188,   48,   49,
      660,   48,   49,   50,  659,   49,  194,  201,   49,  201,
       50,   50,  261,   50,   51,  359,   50,  105,   51,  103,
       50,   51,  188,   50,   51,   52,   71,   51,   71,   51,
      657,  194,   52,  278,  105,   52,   51,   52,   52,   53,

      359,   52,  105,   54,  296,   54,   53,   53,  374,   53,
       54,  648,   53,   54,   81,  278,   54,   69,   69,   69,
       69,  645,   69,   81,  281,  115,   90,   90,   90,   71,
       71,  203,  115,  203,   71,  115,   90,   90,  115,   90,
       71,  643,   97,  281,   97,   81,   81,   97,   97,   97,
       81,  642,   90,   90,  186,  186,  186,   81,   90,  641,
       81,  202,   81,  202,   81,   94,   94,   94,   95,  296,
       95,   95,   95,  374,  640,   94,   94,  202,   94,  112,
       95,  112,  284,   95,  284,   95,   96,  639,   96,   96,
       96,   94,   94,  638,  112,  112,   95,   94,   96,  636,

      112,  102,   95,  102,  102,  102,  169,  169,  169,  169,
       95,  169,  118,  102,   96,  282,  102,  119,  102,  118,
      635,  633,  118,  118,  119,  118,  120,  119,  631,  102,
      119,  624,  282,  120,  119,  102,  120,  121,  122,  120,
      282,  121,  619,  102,  121,  122,  123,  121,  122,  618,
      121,  122,  617,  123,  122,  122,  123,  124,  605,  123,
      285,  125,  285,  288,  124,  288,  602,  124,  125,  601,
      124,  125,  126,  125,  125,  285,  127,  126,  600,  126,
      128,  599,  126,  127,  589,  126,  127,  128,  129,  127,
      128,  587,  128,  128,  127,  129,  130,  591,  129,  591,

      132,  129,  586,  130,  129,  131,  130,  132,  591,  130,
      132,  585,  131,  132,  130,  131,  133,  134,  131,  131,
      562,  561,  131,  133,  134,  560,  133,  134,  135,  133,
      134,  559,  134,  136,  558,  135,  135,  279,  135,  279,
      136,  135,  137,  136,  138,  623,  136,  623,  557,  137,
      136,  138,  137,  139,  138,  137,  623,  138,  553,  549,
      139,  138,  140,  139,  279,  139,  139,  141,  286,  140,
      286,  287,  140,  287,  141,  140,  142,  141,  141,  140,
      141,  143,  548,  142,  286,  143,  142,  287,  143,  142,
      144,  143,  547,  545,  143,  519,  142,  144,  145,  516,

      144,  513,  594,  144,  594,  145,  145,  147,  145,  146,
      146,  145,  594,  147,  147,  147,  146,  147,  148,  146,
      147,  506,  146,  149,  147,  148,  505,  150,  148,  149,
      149,  148,  504,  149,  150,  503,  149,  150,  502,  500,
      150,  151,  150,  497,  484,  152,  149,  476,  151,  151,
      153,  151,  152,  473,  151,  152,  152,  153,  152,  154,
      153,  155,  431,  153,  431,  153,  154,  451,  155,  154,
      450,  155,  154,  449,  155,  155,  156,  154,  431,  448,
      157,  154,  447,  156,  156,  426,  156,  157,  157,  156,
      157,  158,  156,  157,  289,  159,  289,  365,  158,  365,

      160,  158,  159,  159,  158,  159,  158,  160,  159,  161,
      160,  425,  365,  160,  424,  289,  161,  161,  420,  161,
      364,  363,  161,  171,  171,  171,  171,  183,  171,  183,
      358,  357,  183,  183,  183,  187,  187,  187,  193,  260,
      260,  260,  260,  570,  260,  570,  187,  367,  187,  367,
      366,  205,  366,  193,  193,  193,  206,  356,  205,  570,
      171,  205,  187,  206,  205,  366,  206,  187,  367,  206,
      355,  354,  193,  273,  273,  273,  193,  361,  361,  361,
      193,  204,  204,  204,  352,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  207,  208,  209,  295,  209,  208,  292,  207,  208,
      209,  207,  208,  209,  207,  208,  209,  210,  211,  270,
      486,  294,  486,  294,  210,  211,  212,  210,  211,  269,
      210,  211,  210,  212,  211,  486,  212,  213,  268,  212,
      267,  214,  212,  212,  213,  214,  266,  213,  214,  265,

      213,  214,  215,  215,  214,  264,  216,  217,  580,  215,
      580,  217,  215,  216,  217,  215,  216,  217,  218,  216,
      217,  258,  197,  219,  580,  218,  196,  191,  218,  218,
      219,  218,  221,  219,  220,  294,  219,  190,  220,  221,
      180,  220,  221,  222,  220,  221,  179,  220,  221,  177,
      222,  223,  176,  222,  174,  224,  222,  173,  223,  224,
      225,  223,  224,  172,  223,  224,  165,  225,  224,  226,
      225,  227,  164,  225,  116,  227,  226,  226,  227,  226,
      228,  227,  226,  113,  227,  229,  228,  228,  111,  368,
      228,  368,  229,  228,  231,  229,  230,  107,  229,  100,

      230,  231,   89,  230,  231,  232,  230,  231,   87,  230,
      368,   79,  232,   75,  233,  232,   72,   63,  232,  234,
      232,  233,   62,   61,  233,   60,  234,  233,  235,  234,
       59,   35,  234,  233,   30,  235,  234,  236,  235,  237,
       27,  235,   19,   15,  236,  236,  237,  236,  238,  237,
      236,  237,  237,   12,    9,  238,    8,  239,  238,    7,
        0,  238,    0,    0,  239,    0,  238,  239,  240,  241,
      239,    0,  239,  241,    0,  240,  241,  242,  240,  241,
      240,  240,  241,    0,  242,  243,  607,  242,  607,  244,
      242,    0,  243,    0,  242,  243,  244,  245,  243,  244,

        0,  607,  244,  243,  245,  246,  244,  245,    0,  247,
      245,  245,  246,  247,  248,  246,  247,    0,  246,  247,
        0,  248,  247,  250,  248,  249,    0,  248,    0,  249,
      250,    0,  249,  250,  251,  249,  250,    0,  249,  252,
        0,  251,  251,  253,  251,    0,  252,  251,    0,  252,
      253,  252,  252,  253,  254,  255,  253,  254,    0,  256,
      253,  254,  255,  257,  254,  255,  256,  254,  255,  256,
      257,    0,  256,  257,    0,    0,  257,  262,  262,  262,
      262,    0,  262,  263,  263,  263,  263,    0,  263,  274,
      274,  274,  280,    0,  280,    0,    0,  280,  280,  280,

      274,    0,  274,  291,    0,  291,  488,    0,  488,    0,
        0,  613,    0,  613,  262,  297,  274,    0,  291,  291,
      263,  274,  297,  298,  291,  297,  613,  488,  297,    0,
      298,  299,  300,  298,    0,    0,  298,    0,  299,  300,
      299,  299,  300,  301,  299,  300,    0,  302,  303,    0,
      301,    0,  308,  301,  302,  303,  301,  302,  303,  308,
      302,  303,  308,    0,  303,  308,    0,  291,  293,  293,
      293,    0,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  304,  305,
        0,    0,  609,  306,  609,  304,  305,  305,  304,  305,
      306,  304,  305,  306,    0,  304,  306,  307,  309,    0,
      615,  306,  615,  609,  307,  309,  310,  307,  309,  309,
      307,  309,    0,  310,  307,  311,  310,    0,    0,  310,
        0,  615,  311,  312,    0,  311,    0,  313,  311,    0,
      312,  312,    0,  312,  313,    0,  312,  313,  314,  315,

      313,    0,  313,  315,    0,  314,  315,  316,  314,  315,
        0,  314,  315,  314,  316,  317,  318,  316,    0,    0,
      316,    0,  317,  318,  316,  317,  318,  317,  317,  318,
      319,  320,  321,    0,  321,    0,    0,  319,  320,    0,
      319,  320,  319,  319,  320,  323,  320,  321,  321,  322,
      322,    0,  323,  321,    0,  323,  322,  324,  323,  322,
        0,  323,  322,    0,  324,  325,    0,  324,    0,  326,
      324,    0,  325,  326,    0,  325,  326,  327,  325,  326,
        0,  328,  326,    0,  327,  327,  329,  327,  328,    0,
      327,  328,    0,  329,  328,  330,  329,  328,    0,  329,

        0,    0,  330,  329,  331,  330,    0,    0,  330,  332,
      330,  331,    0,  332,  331,    0,  332,  331,  333,  332,
        0,  331,  332,    0,    0,  333,  334,    0,  333,    0,
      335,  333,  335,  334,  334,    0,  334,  335,  337,  334,
      335,    0,  336,  335,  336,  337,  338,  339,  337,  336,
        0,  337,  336,  338,  339,  336,  338,  339,  340,  338,
      339,  340,  341,    0,    0,  340,  338,    0,  340,  341,
      340,  340,  341,  342,  341,  341,    0,    0,  343,  342,
      342,    0,  344,  342,  343,  343,  342,    0,  343,  344,
        0,  343,  344,    0,  345,  344,  346,    0,    0,    0,

      344,  345,    0,  346,  345,  347,  346,  345,    0,  346,
        0,    0,  347,  346,    0,  347,  376,  348,  347,    0,
      347,  348,    0,  376,  348,    0,  376,  348,    0,  376,
      348,  349,  349,  349,  349,    0,  349,  350,  350,  350,
      350,    0,  350,  351,  351,  351,  351,    0,  351,  362,
      362,  362,    0,    0,  372,    0,  372,  403,    0,  403,
      362,  652,  362,  652,    0,    0,    0,    0,  349,  372,
      372,  652,  403,  403,  350,  372,  362,  652,  403,    0,
      351,  362,  369,  369,  369,    0,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  371,  371,  371,    0,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  373,  373,  373,    0,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  377,  378,    0,    0,  379,  379,    0,  377,

      378,  380,  377,  378,  379,  377,  378,  379,  380,  381,
      379,  380,    0,  380,  380,    0,  381,  382,    0,  381,
        0,  382,  381,    0,  382,  383,  384,  382,    0,  383,
      382,    0,  383,  384,  384,  383,  384,    0,  383,  384,
      385,  386,  385,    0,    0,    0,    0,  385,  386,  387,
      385,  386,    0,  385,  386,    0,  387,  388,  386,  387,
        0,  387,  387,    0,  388,  389,  390,  388,    0,  390,
      388,    0,  389,  390,    0,  389,  390,  391,  389,  390,
        0,  391,  392,  393,  391,  393,  668,  391,  668,  392,
      391,    0,  392,  394,    0,  392,  668,  392,  393,  393,

      394,  395,    0,  394,  393,    0,  394,  668,  395,    0,
      396,  395,  397,    0,  395,  395,    0,  396,    0,  397,
      396,    0,  397,  396,    0,  397,  393,  396,    0,  397,
      398,  393,  398,  393,    0,    0,    0,  398,    0,  393,
      398,  393,  399,  398,  399,    0,  400,  401,    0,  399,
        0,  401,  399,  400,  401,  399,  400,  401,  402,  400,
      401,    0,    0,  400,    0,  402,  404,  405,  402,  404,
      402,  402,  405,  404,  405,    0,  404,  405,    0,  404,
      405,  406,  407,  406,    0,    0,    0,    0,  406,  407,
      408,  406,  407,    0,  406,  407,    0,  408,  409,  407,

      408,    0,  410,  408,    0,  409,  411,  412,  409,  410,
      411,  409,  410,  411,  412,  410,  411,  412,  413,  411,
      412,    0,  414,    0,    0,  413,    0,    0,  413,  414,
        0,  413,  414,    0,  414,  414,  415,  415,  415,    0,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  416,  417,    0,    0,
      418,  418,    0,  416,  417,  417,  416,  417,  418,  416,
      417,  418,  419,    0,  418,    0,    0,    0,    0,  419,
        0,    0,  419,    0,    0,  419,  430,  430,  430,    0,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  434,  434,  434,    0,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  435,  436,  435,    0,
        0,  437,    0,  435,  436,    0,  435,  436,  437,  435,
      436,  437,  438,  439,  437,  436,    0,    0,  437,  438,

      439,    0,  438,  439,    0,  438,  439,  440,  441,  440,
        0,    0,  442,    0,  440,  441,  441,  440,  441,  442,
      440,  441,  442,    0,    0,  442,  443,  443,  443,    0,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  444,  445,  446,    0,

        0,    0,    0,  444,  445,  446,  444,  445,  446,  444,
      445,  446,  453,  452,  454,    0,  446,  452,    0,  453,
      452,  454,  453,  452,  454,  453,  452,  454,  455,  456,
        0,    0,  455,    0,    0,  455,  456,    0,  455,  456,
      458,  455,  456,  457,  458,  457,  456,  458,    0,    0,
      458,    0,    0,  458,    0,  459,  460,    0,  457,  457,
        0,    0,  459,  460,  457,  459,  460,    0,  459,  460,
      459,  461,  465,  461,  462,    0,  462,    0,  463,  465,
      463,    0,  465,    0,    0,  465,  461,  461,  463,  462,
      462,    0,  461,  463,  463,  462,  464,  464,  466,  463,

        0,    0,  470,    0,  464,  466,  470,  464,  466,  470,
      464,  466,  470,  467,    0,  470,    0,    0,    0,  461,
      467,    0,  468,  467,    0,    0,  467,  468,    0,  468,
      467,  469,  468,  477,  472,  468,  472,  666,  469,  666,
      477,  469,  469,  477,  469,    0,  477,  666,    0,  472,
      472,    0,  666,    0,    0,  472,  474,  474,  474,    0,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  478,  479,  490,    0,
        0,    0,    0,  478,  479,  490,  478,  479,  490,  478,
      479,  490,  491,  492,  479,    0,  491,    0,    0,  491,
      492,    0,  491,  492,    0,  491,  492,  493,  493,  494,
      501,    0,  496,    0,  496,  493,  494,  501,  493,  494,
      501,  493,  494,  501,  501,    0,  494,  496,  496,    0,
        0,    0,    0,  496,  498,  498,  498,    0,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  507,  508,  509,  508,  510,    0,
      510,  507,  508,  509,  507,  508,  509,  507,  508,  509,
        0,  509,    0,  510,  510,  512,  511,  512,    0,  510,
      511,    0,    0,  511,    0,  514,  511,    0,    0,  511,
      512,  512,  514,    0,  515,  514,  512,  517,  514,  517,

      514,  515,    0,    0,  515,    0,    0,  515,  515,  518,
        0,  518,  517,  517,    0,    0,    0,    0,  517,  518,
        0,  520,  521,  520,  518,  518,  521,    0,  520,  521,
      518,  520,  521,  522,  520,  521,    0,    0,    0,  517,
      522,    0,    0,  522,  523,  517,  522,  517,  523,  524,
        0,  523,  524,  517,  523,    0,  524,  523,    0,  524,
        0,    0,  524,  525,  525,  525,    0,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,

      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  527,  527,  527,    0,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  527,  527,  528,  528,  528,    0,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  529,  530,  531,    0,    0,  530,    0,
      529,  530,  531,  529,  530,  531,  529,  530,  531,  536,
      537,  538,    0,  538,    0,    0,  536,  537,  538,  536,

      537,  538,  536,  537,  538,  536,  539,    0,    0,    0,
        0,    0,    0,  539,    0,    0,  539,    0,    0,  539,
      540,  540,  540,    0,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      542,  542,  542,    0,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      543,  543,  543,    0,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      544,  550,  555,    0,    0,  550,    0,  544,  550,  555,
      544,  550,  555,  544,  550,  555,    0,  544,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  552,  554,
      552,    0,  554,    0,    0,    0,  554,    0,  556,  554,
        0,    0,  554,  552,  552,  556,    0,  564,  556,  552,
      565,  556,  565,  556,  564,    0,    0,  564,    0,    0,
      564,  567,  566,  567,    0,  565,  565,    0,    0,  566,
        0,  565,  566,  565,    0,  566,  567,  567,    0,    0,
        0,    0,  567,  569,  569,  569,    0,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  573,  573,  573,    0,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  574,  576,  577,    0,    0,    0,    0,
      574,  576,  577,  574,  576,  577,  574,  576,  577,    0,
        0,  576,  579,  579,  579,    0,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  583,  583,  583,    0,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  584,  588,  597,  588,    0,    0,  597,  584,
        0,  597,  584,    0,  597,  584,    0,  597,  588,  588,
        0,  588,  588,  588,  588,  590,  603,  590,    0,    0,

        0,    0,    0,  603,    0,  590,  603,    0,    0,  603,
      590,  590,  603,    0,    0,    0,  590,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  596,  611,  596,
      604,    0,  604,    0,  606,  611,  606,    0,  611,    0,

        0,  611,  596,  596,    0,  604,  604,  612,  596,  606,
      606,  604,    0,  604,  612,  606,  620,  612,  620,  621,
      612,  621,    0,  612,    0,    0,    0,    0,    0,    0,
        0,  620,  620,    0,  621,  621,  606,  620,    0,  628,
      621,  628,  606,  630,  606,  630,  647,    0,  647,  628,
      606,  625,    0,  625,  628,  628,  632,    0,  630,  630,
      628,  647,  647,  632,  630,    0,  632,  647,    0,  632,
        0,    0,    0,  632,    0,    0,    0,    0,  625,  625,
      625,  625,  625,  625,  625,  625,    0,    0,    0,    0,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  629,  637,  629,  644,    0,
        0,    0,    0,  637,    0,  644,  637,  658,  644,  637,

        0,  644,    0,  637,  658,  644,    0,  658,    0,    0,
      658,    0,  629,  629,  629,  629,  629,  629,  629,  629,
        0,    0,    0,    0,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  656,
      656,  663,  670,    0,  670,    0,    0,  656,  663,  670,

      656,  663,  670,  656,  663,  670,  675,  677,  678,    0,
        0,    0,    0,  675,  677,  678,  675,  677,  678,  675,
      677,  678,  679,  677,    0,  678,    0,    0,    0,  679,
        0,    0,  679,    0,    0,  679,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  684,  684,    0,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  686,    0,

      686,    0,    0,  686,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  687,    0,  687,  687,  687,  687,  687,
      687,  687,  688,  688,    0,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  689,  689,    0,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  690,  690,
        0,  690,  691,    0,  691,    0,    0,    0,    0,    0,
        0,  691,  691,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  693,  693,    0,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  694,    0,
      694,  695,    0,  695,    0,    0,    0,    0,    0,    0,

      695,  695,  696,    0,  696,    0,    0,    0,  696,  696,
        0,  696,  696,  697,    0,  697,    0,    0,    0,    0,
        0,    0,  697,  697,  698,    0,  698,    0,    0,  698,
        0,  698,    0,  698,  698,  699,    0,  699,    0,    0,
        0,    0,  699,  699,  699,  699,  700,  700,    0,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  702,  702,    0,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  704,  704,    0,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      705,  705,    0,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  706,  706,    0,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  707,  707,    0,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  708,
      708,    0,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  709,  709,    0,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  710,  710,    0,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  711,  711,
        0,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  712,  712,    0,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  713,    0,  713,    0,    0,  713,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  715,  715,
        0,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  716,    0,  716,    0,    0,  716,  716,    0,  716,
      716,  716,  717,    0,  717,    0,    0,  717,  717,  717,
      717,  717,  717,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  719,    0,  719,  719,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[143] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 
    0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "res/dpl.l"
#line 4 "res/dpl.l"
	# include "dpl.tab.h"
	# include <string.h>
	# include <stdio.h>
#line 10 "res/dpl.l"
	int omit_last_brace = 0;
	int omit_semicolon = 0;
	int unpaired_brace_count = 0;



/* integer length */
/* float exponent */
#line 1838 "/home/nikolovd/MasterRad/SimilarityDetection_pthreads/build/../src/lexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ASM 2
#define DEFINE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 27 "res/dpl.l"

	/* ignored keywords */
#line 2062 "/home/nikolovd/MasterRad/SimilarityDetection_pthreads/build/../src/lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 681 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4891 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 29 "res/dpl.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "res/dpl.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 31 "res/dpl.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 32 "res/dpl.l"

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 33 "res/dpl.l"

	YY_BREAK
case 6:
YY_RULE_SETUP
#line 34 "res/dpl.l"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 35 "res/dpl.l"

	YY_BREAK
case 8:
YY_RULE_SETUP
#line 36 "res/dpl.l"

	YY_BREAK
case 9:
YY_RULE_SETUP
#line 37 "res/dpl.l"

	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "res/dpl.l"

	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 "res/dpl.l"

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 "res/dpl.l"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 41 "res/dpl.l"

	YY_BREAK
case 14:
YY_RULE_SETUP
#line 42 "res/dpl.l"

	YY_BREAK
case 15:
YY_RULE_SETUP
#line 43 "res/dpl.l"

	YY_BREAK
case 16:
YY_RULE_SETUP
#line 44 "res/dpl.l"

	YY_BREAK
case 17:
YY_RULE_SETUP
#line 45 "res/dpl.l"

	YY_BREAK
case 18:
YY_RULE_SETUP
#line 46 "res/dpl.l"

	YY_BREAK
case 19:
YY_RULE_SETUP
#line 47 "res/dpl.l"

	YY_BREAK
case 20:
YY_RULE_SETUP
#line 48 "res/dpl.l"

	YY_BREAK
case 21:
YY_RULE_SETUP
#line 49 "res/dpl.l"

	YY_BREAK
case 22:
YY_RULE_SETUP
#line 50 "res/dpl.l"

	YY_BREAK
case 23:
YY_RULE_SETUP
#line 51 "res/dpl.l"

	YY_BREAK
case 24:
YY_RULE_SETUP
#line 52 "res/dpl.l"

	YY_BREAK
case 25:
YY_RULE_SETUP
#line 53 "res/dpl.l"

	YY_BREAK
case 26:
YY_RULE_SETUP
#line 54 "res/dpl.l"

	YY_BREAK
case 27:
YY_RULE_SETUP
#line 55 "res/dpl.l"

	YY_BREAK
case 28:
YY_RULE_SETUP
#line 56 "res/dpl.l"

	YY_BREAK
case 29:
YY_RULE_SETUP
#line 57 "res/dpl.l"

	YY_BREAK
case 30:
YY_RULE_SETUP
#line 58 "res/dpl.l"

	YY_BREAK
case 31:
YY_RULE_SETUP
#line 59 "res/dpl.l"
{ omit_last_brace++; }
	YY_BREAK
/* active keywords */
case 32:
YY_RULE_SETUP
#line 63 "res/dpl.l"
{ return BREAK_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 64 "res/dpl.l"
{ return CASE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 65 "res/dpl.l"
{ return CATCH_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 66 "res/dpl.l"
{ return UNION; }
	YY_BREAK
case 36:
#line 69 "res/dpl.l"
case 37:
YY_RULE_SETUP
#line 69 "res/dpl.l"
{ return CLASS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 "res/dpl.l"
{ return CONTINUE_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 "res/dpl.l"
{ return DEFAULT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 "res/dpl.l"
{ return DELETE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 "res/dpl.l"
{ return DO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 "res/dpl.l"
{ return ELSE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 "res/dpl.l"
{ return ENUM_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 "res/dpl.l"
{ return FOR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 "res/dpl.l"
{ return GOTO_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 "res/dpl.l"
{ return IF; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 "res/dpl.l"
{ return NEW; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 "res/dpl.l"
{ return RETURN_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 "res/dpl.l"
{ return SWITCH_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 "res/dpl.l"
{ return THROW_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 "res/dpl.l"
{ return TRY_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 "res/dpl.l"
{ return WHILE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 "res/dpl.l"
{ return OR_OP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "res/dpl.l"
{ 
							char * pointer = strchr(yytext, '*');
							if(pointer != 0) {
								char *s = strchr(yytext, '(');
								*pointer = ')';
								int i = pointer - yytext + 1;
								int n = strlen(yytext);
								for(; i < n; i++) yytext[i] = ' ';
								
								yyless(s-yytext);
							}
							return IDENT; 
							}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "res/dpl.l"
{ return SIZEOF; }
	YY_BREAK
/* operator overloading */
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "res/dpl.l"
{ return IDENT; }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "res/dpl.l"
{ return IDENT; /*FUNC_OPERATOR;*/ }
	YY_BREAK
/* casts */
case 58:
#line 109 "res/dpl.l"
case 59:
#line 110 "res/dpl.l"
case 60:
#line 111 "res/dpl.l"
case 61:
YY_RULE_SETUP
#line 111 "res/dpl.l"
{ return CAST; }
	YY_BREAK
/* booleans */
case 62:
#line 115 "res/dpl.l"
case 63:
YY_RULE_SETUP
#line 115 "res/dpl.l"
{ return BOOL_VALUE; } 
	YY_BREAK
/* charecter */
case 64:
#line 118 "res/dpl.l"
case 65:
#line 119 "res/dpl.l"
case 66:
YY_RULE_SETUP
#line 119 "res/dpl.l"
{ return CHAR_VALUE; }
	YY_BREAK
/* string */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 122 "res/dpl.l"
{ return STRING_VALUE; }
	YY_BREAK
/* integers */
case 68:
#line 126 "res/dpl.l"
case 69:
#line 127 "res/dpl.l"
case 70:
#line 128 "res/dpl.l"
/* hex float */
case 71:
#line 131 "res/dpl.l"
/* decimal float */
case 72:
#line 134 "res/dpl.l"
case 73:
YY_RULE_SETUP
#line 134 "res/dpl.l"
{ return NUMERIC_VALUE; }
	YY_BREAK
/* data types */
case 74:
YY_RULE_SETUP
#line 137 "res/dpl.l"
{ return BOOL_TYPE; } 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 138 "res/dpl.l"
{ return CHAR_TYPE; }
	YY_BREAK
case 76:
#line 140 "res/dpl.l"
case 77:
#line 141 "res/dpl.l"
case 78:
#line 142 "res/dpl.l"
case 79:
#line 143 "res/dpl.l"
case 80:
#line 144 "res/dpl.l"
case 81:
#line 145 "res/dpl.l"
case 82:
#line 146 "res/dpl.l"
case 83:
YY_RULE_SETUP
#line 146 "res/dpl.l"
{ return NUMERIC_TYPE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 147 "res/dpl.l"
{ return VOID; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 148 "res/dpl.l"
{ yyless(4); } /* strlen("long") = 4; */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 149 "res/dpl.l"
{ yyless(8); } /* strlen("unsigned") = 8; */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 150 "res/dpl.l"
{ yyless(6); } /* strlen("signed") = 6; */
	YY_BREAK
/* identifiers */
case 88:
YY_RULE_SETUP
#line 153 "res/dpl.l"
{ return IDENT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 154 "res/dpl.l"
{ yyless(strchr(yytext, '.') - yytext + 1); }	
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 155 "res/dpl.l"
{ yyless(strchr(yytext, '>') - yytext + 1); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 156 "res/dpl.l"
{ yyless(strchr(yytext, ':') - yytext + 2); }	/* 2 is added because there are two ':' */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 159 "res/dpl.l"
{ if(yytext[yyleng-2] == '\\') BEGIN(DEFINE);  }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 160 "res/dpl.l"
{ if(yytext[yyleng-2] != '\\') BEGIN(INITIAL);  }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 161 "res/dpl.l"

	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 163 "res/dpl.l"
{ BEGIN(ASM);} 
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 164 "res/dpl.l"

	YY_BREAK
case 97:
YY_RULE_SETUP
#line 165 "res/dpl.l"
{ BEGIN(INITIAL);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 166 "res/dpl.l"

	YY_BREAK
/* comments */
case 99:
YY_RULE_SETUP
#line 169 "res/dpl.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 170 "res/dpl.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 171 "res/dpl.l"

	YY_BREAK
case 102:
YY_RULE_SETUP
#line 172 "res/dpl.l"

	YY_BREAK
/* white space */
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 175 "res/dpl.l"

	YY_BREAK
case 104:
#line 179 "res/dpl.l"
case 105:
#line 180 "res/dpl.l"
case 106:
#line 181 "res/dpl.l"
case 107:
#line 182 "res/dpl.l"
case 108:
#line 183 "res/dpl.l"
case 109:
#line 184 "res/dpl.l"
case 110:
#line 185 "res/dpl.l"
case 111:
#line 186 "res/dpl.l"
case 112:
#line 187 "res/dpl.l"
case 113:
YY_RULE_SETUP
#line 187 "res/dpl.l"
{ return yytext[0]; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "res/dpl.l"
{ return yytext[0];	}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 191 "res/dpl.l"
{ return SCOPE_OP;	}
	YY_BREAK
case 116:
#line 193 "res/dpl.l"
case 117:
YY_RULE_SETUP
#line 193 "res/dpl.l"
{ return PTR_OP; 	}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 194 "res/dpl.l"
{ return INC_OP; 	}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 195 "res/dpl.l"
{ return DEC_OP; 	}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 196 "res/dpl.l"
{ return SHL_OP;	}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 197 "res/dpl.l"
{ return SHR_OP; 	}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 198 "res/dpl.l"
{ return LE_OP; 	}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "res/dpl.l"
{ return GE_OP; 	}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "res/dpl.l"
{ return EQ_OP; 	}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 201 "res/dpl.l"
{ return NE_OP; 	}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 202 "res/dpl.l"
{ return AND_OP;	}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 203 "res/dpl.l"
{ return OR_OP; 	}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "res/dpl.l"
{  return SHR_ASSIGN;	}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 205 "res/dpl.l"
{  return SHL_ASSIGN; 	}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 206 "res/dpl.l"
{  return ADD_ASSIGN;	}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 207 "res/dpl.l"
{  return SUB_ASSIGN; 	}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 208 "res/dpl.l"
{  return MUL_ASSIGN; 	}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 209 "res/dpl.l"
{  return DIV_ASSIGN; 	}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 210 "res/dpl.l"
{  return MOD_ASSIGN; 	}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 211 "res/dpl.l"
{  return AND_ASSIGN; 	}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 212 "res/dpl.l"
{  return XOR_ASSIGN; 	}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 213 "res/dpl.l"
{  return OR_ASSIGN; 	}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 214 "res/dpl.l"
{  return ELLIPSIS; }	
	YY_BREAK
/* symbols with special treatment */
case 139:
YY_RULE_SETUP
#line 217 "res/dpl.l"
{ 	unpaired_brace_count++; 
		if( omit_last_brace == 0 || unpaired_brace_count != 1 ) return '{'; 
	}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 221 "res/dpl.l"
{ 	unpaired_brace_count--;
		if(omit_last_brace >= 1 && unpaired_brace_count == 0) omit_last_brace--;
		else return '}';
	}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 226 "res/dpl.l"
{ 	if(omit_semicolon == 1 && unpaired_brace_count == 0) {
			omit_semicolon = 0;
		} else return ';' ;
	}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 233 "res/dpl.l"
ECHO;
	YY_BREAK
#line 2802 "/home/nikolovd/MasterRad/SimilarityDetection_pthreads/build/../src/lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ASM):
case YY_STATE_EOF(DEFINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 681 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 681 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 680);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; // After all that talk, this was set to 1 anyways...
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 233 "res/dpl.l"



/*
void readFromFile(char* fileName) {
	if(!(yyin = fopen(fileName, "r"))) {
		perror(fileName);
		exit(1);
	}
}

main(int argc, char **argv) {
	int tok;
	
	if(argc > 1) {
		readFromFile(argv[1]);
	} else {
		char fileName[100];
		printf("Enter input file name:\n");
		scanf("%s",&fileName);
		readFromFile(fileName);
	}

	while(tok = yylex()) {
		//printf("%d\n", tok);
	}						
}
*/
